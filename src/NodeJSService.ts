import path from 'path';
import fs from 'fs-extra';
import { IPC_EVENTS, ANALYTIC_EVENTS, headlessDirectoryName } from './constants';
import * as LocalMain from '@getflywheel/local/main';

const { execFilePromise, getServiceContainer } = LocalMain;

const serviceContainer = getServiceContainer();

type GenericObject = { [key: string]: any };
const resourcesPath = path.resolve(__dirname, '..');
const nodeModulesPath = path.resolve(resourcesPath, 'node_modules');

export default class LightningServiceNodeJS extends LocalMain.LightningService {
	readonly serviceName: string = 'nodejs';

	readonly binVersion: string = '1.0.0';

	get requiredPorts() {
		return {
			HTTP: 1,
		};
	}

	get appNodePath(): string {
		return path.join(this._site.longPath, headlessDirectoryName);
	}

	get bins() {
		return {
			[LocalMain.LightningServicePlatform.Darwin]: {
				electron: process.execPath,
			},
			[LocalMain.LightningServicePlatform.Win32]: {
				electron: process.execPath,
			},
			[LocalMain.LightningServicePlatform.Linux]: {
				electron: process.execPath,
			},
		};
	}

	get electronifiedPATH(): string {
		const PATH = process.env.PATH!.split(path.delimiter);
		PATH.unshift(path.join(resourcesPath, 'electron-node'));
		return PATH.join(path.delimiter);
	}

	get defaultEnv(): GenericObject {
		return {
			LOCAL_ELECTRON_PATH: this.bin!.electron,
			ELECTRON_RUN_AS_NODE: '1',
			PATH: this.electronifiedPATH,
			NPM_PATH: path.join(nodeModulesPath, 'npm', 'bin', 'npm-cli.js'),
		};
	}

	/**
	 * @todo show stdout/stderr to user
	 */
	async preprovision(): Promise<void> {
		const { errorHandler } = getServiceContainer().cradle;
		const appNodeExists = await fs.pathExists(path.resolve(this._site.longPath, headlessDirectoryName));

		try {
			if (appNodeExists) {
				// node_modules are excluded from exports so install them on import.
				await execFilePromise(this.bin!.electron, [
					path.resolve(nodeModulesPath, 'npm', 'bin', 'npm-cli.js'),
					'install',
				], {
					cwd: path.join(this._site.longPath, headlessDirectoryName),
					env: this.defaultEnv,
				});
			} else {
				await execFilePromise(this.bin!.electron, [
					path.resolve(nodeModulesPath, 'npm', 'bin', 'npx-cli.js'),
					'create-next-app',
					'--example',
					'https://github.com/wpengine/headless-framework/tree/canary',
					'--example-path',
					'examples/getting-started',
					'--use-npm',
					headlessDirectoryName,
				], {
					cwd: this._site.longPath,
					env: this.defaultEnv,
				});
			}

			/**
			 * @todo Next.js doesn't support an env var for the start port. This is a termpoary hack around it.
			 *
			 * @see https://github.com/vercel/next.js/issues/10338
			 */
			await LocalMain.replaceInFileAsync(path.join(this.appNodePath, 'package.json'), [
				['"dev": "next dev",', '"dev": "next dev -p $PORT",'],
			]);
		} catch (e) {
			// Report the error to the user, the Local log, and Sentry.
			errorHandler.handleError({
				error: e,
				message: 'error encounted during preprovision step',
				dialogTitle: 'Uh-oh! Local ran into an error.',
				dialogMessage: e.toString(),
			});

			// Halt provisioning and cleanup.
			throw new Error('error encounted during preprovision step');
		}
	}

	async finalizeNewSite(): Promise<void> {
		const { wpCli, siteDatabase, siteProcessManager, errorHandler } = serviceContainer.cradle;

		try {
			// eslint-disable-next-line default-case
			await siteDatabase.waitForDB(this._site);

			// Add GraphQL server to WordPress.
			await wpCli.run(this._site, [
				'plugin',
				'install',
				'wp-graphql',
				'--activate',
			]);

			// Add WP Engine Headless WordPress plugin.
			await wpCli.run(this._site, [
				'plugin',
				'install',
				'https://wp-product-info.wpesvc.net/v1/plugins/wpe-headless?download',
				'--activate',
			]);

			// Fetch the secret key generated by the headless plugin on activation.
			const headlessSettings = await wpCli.run(this._site, [
				'option',
				'get',
				'wpe_headless',
				'--format=json',
			]);

			const parsedHeadlessSettings: {
				frontend_uri: string, // eslint-disable-line camelcase
				secret_key: string, // eslint-disable-line camelcase
				menu_locations: string, // eslint-disable-line camelcase
				disable_theme: string, // eslint-disable-line camelcase
				enable_rewrites: string, // eslint-disable-line camelcase
				enable_redirects: string, // eslint-disable-line camelcase
			} = JSON.parse(headlessSettings);
			const { secret_key: secretKey } = parsedHeadlessSettings;

			// Set the frontend_uri setting to the frontend service URL (this service).
			// This is required for post previewing to work in WordPress.
			await wpCli.run(this._site, [
				'option',
				'patch',
				'insert',
				'wpe_headless',
				'frontend_uri',
				this._site.frontendUrl,
			]);

			// Write the required settings for the headless framework to `.env.local`.
			const environmentFile = `NEXT_PUBLIC_WORDPRESS_URL=${this._site.backendUrl}
# Plugin secret found in WordPress Settings->Headless
WP_HEADLESS_SECRET=${secretKey}
`;
			await fs.writeFile(path.join(this.appNodePath, '.env.local'), environmentFile);

			// Next.js needs to be restarted after writing the env file.
			await siteProcessManager.restart(this._site);
		} catch (e) {
			// Report the error to the user, the Local log, and Sentry.
			errorHandler.handleError({
				error: e,
				message: 'error encounted during finalizeNewSite step',
				dialogTitle: 'Uh-oh! Local ran into an error.',
				dialogMessage: e.toString(),
			});

			// Halt provisioning and cleanup.
			throw new Error('error encounted during finalizeNewSite step');
		}

		LocalMain.sendIPCEvent(IPC_EVENTS.TRACK_EVENT, ANALYTIC_EVENTS.SITE_PROVISIONED);
	}

	get devEnvVars(): GenericObject {
		return {
			PORT: this.port!.toString(),
			WORDPRESS_URL: this._site.backendUrl,
			WORDPRESS_API_URL: `${this._site.backendUrl}/graphql`,
		};
	}

	start() {
		return [
			{
				name: 'nodejs',
				binPath: path.resolve(this.appNodePath, 'node_modules', 'next', 'dist', 'bin', 'next'),
				args: ['dev', '-p', this.port!.toString()],
				cwd: this.appNodePath,
				env: {
					...this.defaultEnv,
					...this.devEnvVars,
				},
			},
		];
	}
}
